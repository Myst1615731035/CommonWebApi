<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ include file="$(ProjectDir)DbHelper.ttinclude"  #>
<#@ include file="$(ProjectDir)ModelAuto.ttinclude"	#>
<# var manager = new Manager(Host, GenerationEnvironment, true); #>

<# 
	var OutputPath =Path.GetDirectoryName(Path.GetDirectoryName(Path.GetDirectoryName(Host.TemplateFile+"..")+"..")+"..");
	OutputPath=Path.Combine(OutputPath,"CommonApi","Controllers");
	if (!Directory.Exists(OutputPath))
	{
	    Directory.CreateDirectory(OutputPath);
	}
#>
<#
    foreach (var item in DbHelper.GetDbTablesNew(config.ConnectionString, config.DbDatabase,config.TableName))
    {
		string tableName = item.ToString();
        //如果已经存在文件，则跳过
		if(DbHelper.ExistFile(OutputPath,tableName+"Controller.cs").Count > 0)
		{
			continue;
		}
		manager.StartBlock(tableName+"Controller.cs",OutputPath);#>
using Common.IServices;
using Common.Model.ApiModel;
using Common.Model.Entities;
using Common.Utils;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using SqlSugar;

namespace CommonApi.Controllers
{	
	/// <summary>
	/// <#=tableName#>Controller
	/// </summary>	
	[Route("api/[controller]/[action]")]
    [ApiController]
    [Authorize]
	public class <#=tableName#>Controller : ControllerBase
    {
        #region 接口构造
		private readonly I<#=tableName#>Services _service;
		private readonly IUser _user;
		private readonly ILogger<<#=tableName#>Controller> _logger;

		/// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="service"></param>
        /// <param name="user"></param>
        /// <param name="logger"></param>
        public <#=tableName#>Controller(I<#=tableName#>Services service,IUser user,ILogger<<#=tableName#>Controller> logger)
		{
			_service = service;
			_user = user;
			_logger = logger;
		}
        #endregion

		#region 获取数据
		/// <summary>
        /// 获取数据列表
        /// </summary>
        /// <param name="pagination"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<ContentJson<Pagination>> GetList([FromBody] Pagination pagination)
        {
            var exp = Expressionable.Create<<#=tableName#>>();
			// 增加查询条件

            var list = await _service.QueryPage(exp.ToExpression(), pagination);
			return new ContentJson<Pagination>()
            {
                msg = "success",
                success = true,
                data = list
            };
		}

		/// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<ContentJson<object>> GetEntity([FromBody] object id)
        {
            var exp = Expressionable.Create<<#=tableName#>>();
			// 增加查询条件

            var entity = await _service.QueryById(id);
			return new ContentJson<object>()
            {
                msg = "success",
                success = true,
                data = entity
            };
		}
        #endregion

		#region 提交数据
		/// <summary>
        /// 新增或更新实体
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<ContentJson<string>> SaveEntity([FromBody] <#=tableName#> entity)
        {
            //结果定义
            var result = new ContentJson<string>()
            {
                msg = "操作失败",
                success = false,
                data = ""
            };

            // Update
            if(entity.Id.IsNotEmptyOrNull())
            {
                if(await _service.Update(entity))
                {
                    result.msg = "更新成功";
                    result.success = true;
                }
                
            }
            // Insert
            else
            {
                entity.CreateId = _user.ID;
                entity.CreateName = _user.Name;
                if((await _service.Add(entity) > 0))
                {
                    result.msg = "添加成功";
                    result.success = true;
                }
            }
			return result;
		}

        /// <summary>
        /// 删除实体
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<ContentJson<string>> Delete([FromBody] <#=tableName#> entity)
        {
            //结果定义
            var result = new ContentJson<string>()
            {
                msg = "操作失败",
                success = false,
                data = ""
            };

            // Delete
            if(entity.Id.IsNotEmptyOrNull())
            {
                if(await _service.Delete(entity))
                {
                    result.msg = "数据已删除";
                    result.success = true;
                }
                
            }
			return result;
		}

        /// <summary>
        /// 删除实体
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        [HttpPost]
        public async Task<ContentJson<string>> DeleteById([FromBody] object Id)
        {
            //结果定义
            var result = new ContentJson<string>()
            {
                msg = "操作失败",
                success = false,
                data = ""
            };

            // Delete
            if(Id.IsNotEmptyOrNull())
            {
                if(await _service.DeleteById(Id))
                {
                    result.msg = "数据已删除";
                    result.success = true;
                }
            }
			return result;
		}
		#endregion
    }
}
<# 
		manager.EndBlock(); 
	} 
	manager.Process(true);
#> 

